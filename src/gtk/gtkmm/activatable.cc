// Generated by gmmproc 2.54.0 -- DO NOT MODIFY!

#undef GTK_DISABLE_DEPRECATED
#define GDK_DISABLE_DEPRECATION_WARNINGS 1
 

#include <glibmm.h>

#include <gtkmm/activatable.h>
#include <gtkmm/private/activatable_p.h>


/* Copyright 2009 The gtkmm Development Team
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
 */

#include <gtk/gtk.h>


namespace
{
} // anonymous namespace


namespace Glib
{

Glib::RefPtr<Gtk::Activatable> wrap(GtkActivatable* object, bool take_copy)
{
  return Glib::RefPtr<Gtk::Activatable>( dynamic_cast<Gtk::Activatable*> (Glib::wrap_auto_interface<Gtk::Activatable> ((GObject*)(object), take_copy)) );
  //We use dynamic_cast<> in case of multiple inheritance.
}

} // namespace Glib


namespace Gtk
{


/* The *_Class implementation: */

const Glib::Interface_Class& Activatable_Class::init()
{
  if(!gtype_) // create the GType if necessary
  {
    // Glib::Interface_Class has to know the interface init function
    // in order to add interfaces to implementing types.
    class_init_func_ = &Activatable_Class::iface_init_function;

    // We can not derive from another interface, and it is not necessary anyway.
    gtype_ = gtk_activatable_get_type();
  }

  return *this;
}

void Activatable_Class::iface_init_function(void* g_iface, void*)
{
  const auto klass = static_cast<BaseClassType*>(g_iface);

  //This is just to avoid an "unused variable" warning when there are no vfuncs or signal handlers to connect.
  //This is a temporary fix until I find out why I can not seem to derive a GtkFileChooser interface. murrayc
  g_assert(klass != nullptr);

  klass->update = &update_vfunc_callback;
  klass->sync_action_properties = &sync_action_properties_vfunc_callback;

}

void Activatable_Class::update_vfunc_callback(GtkActivatable* self, GtkAction* action, const gchar* property_name)
{
  const auto obj_base = static_cast<Glib::ObjectBase*>(
      Glib::ObjectBase::_get_current_wrapper((GObject*)self));

  // Non-gtkmmproc-generated custom classes implicitly call the default
  // Glib::ObjectBase constructor, which sets is_derived_. But gtkmmproc-
  // generated classes can use this optimisation, which avoids the unnecessary
  // parameter conversions if there is no possibility of the virtual function
  // being overridden:
  if(obj_base && obj_base->is_derived_())
  {
    const auto obj = dynamic_cast<CppObjectType* const>(obj_base);
    if(obj) // This can be NULL during destruction.
    {
      try // Trap C++ exceptions which would normally be lost because this is a C callback.
      {
        // Call the virtual member method, which derived classes might override.
        obj->update_vfunc(Glib::wrap(action, true)
, Glib::convert_const_gchar_ptr_to_ustring(property_name)
);
        return;
      }
      catch(...)
      {
        Glib::exception_handlers_invoke();
      }
    }
  }

  BaseClassType *const base = static_cast<BaseClassType*>(
      g_type_interface_peek_parent( // Get the parent interface of the interface (The original underlying C interface).
g_type_interface_peek(G_OBJECT_GET_CLASS(self), CppObjectType::get_type()) // Get the interface.
)  );

  // Call the original underlying C function:
  if(base && base->update)
    (*base->update)(self, action, property_name);
}
void Activatable_Class::sync_action_properties_vfunc_callback(GtkActivatable* self, GtkAction* action)
{
  const auto obj_base = static_cast<Glib::ObjectBase*>(
      Glib::ObjectBase::_get_current_wrapper((GObject*)self));

  // Non-gtkmmproc-generated custom classes implicitly call the default
  // Glib::ObjectBase constructor, which sets is_derived_. But gtkmmproc-
  // generated classes can use this optimisation, which avoids the unnecessary
  // parameter conversions if there is no possibility of the virtual function
  // being overridden:
  if(obj_base && obj_base->is_derived_())
  {
    const auto obj = dynamic_cast<CppObjectType* const>(obj_base);
    if(obj) // This can be NULL during destruction.
    {
      try // Trap C++ exceptions which would normally be lost because this is a C callback.
      {
        // Call the virtual member method, which derived classes might override.
        obj->sync_action_properties_vfunc(Glib::wrap(action, true)
);
        return;
      }
      catch(...)
      {
        Glib::exception_handlers_invoke();
      }
    }
  }

  BaseClassType *const base = static_cast<BaseClassType*>(
      g_type_interface_peek_parent( // Get the parent interface of the interface (The original underlying C interface).
g_type_interface_peek(G_OBJECT_GET_CLASS(self), CppObjectType::get_type()) // Get the interface.
)  );

  // Call the original underlying C function:
  if(base && base->sync_action_properties)
    (*base->sync_action_properties)(self, action);
}


Glib::ObjectBase* Activatable_Class::wrap_new(GObject* object)
{
  return new Activatable((GtkActivatable*)(object));
}


/* The implementation: */

Activatable::Activatable()
:
  Glib::Interface(activatable_class_.init())
{}

Activatable::Activatable(GtkActivatable* castitem)
:
  Glib::Interface((GObject*)(castitem))
{}

Activatable::Activatable(const Glib::Interface_Class& interface_class)
: Glib::Interface(interface_class)
{
}

Activatable::Activatable(Activatable&& src) noexcept
: Glib::Interface(std::move(src))
{}

Activatable& Activatable::operator=(Activatable&& src) noexcept
{
  Glib::Interface::operator=(std::move(src));
  return *this;
}

Activatable::~Activatable() noexcept
{}

// static
void Activatable::add_interface(GType gtype_implementer)
{
  activatable_class_.init().add_interface(gtype_implementer);
}

Activatable::CppClassType Activatable::activatable_class_; // initialize static member

GType Activatable::get_type()
{
  return activatable_class_.init().get_type();
}


GType Activatable::get_base_type()
{
  return gtk_activatable_get_type();
}


#ifndef GTKMM_DISABLE_DEPRECATED
G_GNUC_BEGIN_IGNORE_DEPRECATIONS
void Activatable::do_set_related_action(const Glib::RefPtr<Action>& action)
{
  gtk_activatable_do_set_related_action(gobj(), Glib::unwrap(action));
}
G_GNUC_END_IGNORE_DEPRECATIONS
#endif // GTKMM_DISABLE_DEPRECATED

#ifndef GTKMM_DISABLE_DEPRECATED
G_GNUC_BEGIN_IGNORE_DEPRECATIONS
Glib::RefPtr<Action> Activatable::get_related_action()
{
  Glib::RefPtr<Action> retvalue = Glib::wrap(gtk_activatable_get_related_action(gobj()));
  if(retvalue)
    retvalue->reference(); //The function does not do a ref for us.
  return retvalue;
}
G_GNUC_END_IGNORE_DEPRECATIONS
#endif // GTKMM_DISABLE_DEPRECATED

#ifndef GTKMM_DISABLE_DEPRECATED
G_GNUC_BEGIN_IGNORE_DEPRECATIONS
Glib::RefPtr<const Action> Activatable::get_related_action() const
{
  return const_cast<Activatable*>(this)->get_related_action();
}
G_GNUC_END_IGNORE_DEPRECATIONS
#endif // GTKMM_DISABLE_DEPRECATED

#ifndef GTKMM_DISABLE_DEPRECATED
G_GNUC_BEGIN_IGNORE_DEPRECATIONS
bool Activatable::get_use_action_appearance() const
{
  return gtk_activatable_get_use_action_appearance(const_cast<GtkActivatable*>(gobj()));
}
G_GNUC_END_IGNORE_DEPRECATIONS
#endif // GTKMM_DISABLE_DEPRECATED

#ifndef GTKMM_DISABLE_DEPRECATED
G_GNUC_BEGIN_IGNORE_DEPRECATIONS
void Activatable::sync_action_properties(const Glib::RefPtr<Action>& action)
{
  gtk_activatable_sync_action_properties(gobj(), Glib::unwrap(action));
}
G_GNUC_END_IGNORE_DEPRECATIONS
#endif // GTKMM_DISABLE_DEPRECATED

#ifndef GTKMM_DISABLE_DEPRECATED
G_GNUC_BEGIN_IGNORE_DEPRECATIONS
void Activatable::set_related_action(const Glib::RefPtr<Action>& action)
{
  gtk_activatable_set_related_action(gobj(), Glib::unwrap(action));
}
G_GNUC_END_IGNORE_DEPRECATIONS
#endif // GTKMM_DISABLE_DEPRECATED

#ifndef GTKMM_DISABLE_DEPRECATED
G_GNUC_BEGIN_IGNORE_DEPRECATIONS
void Activatable::set_use_action_appearance(bool use_appearance)
{
  gtk_activatable_set_use_action_appearance(gobj(), static_cast<int>(use_appearance));
}
G_GNUC_END_IGNORE_DEPRECATIONS
#endif // GTKMM_DISABLE_DEPRECATED


#ifndef GTKMM_DISABLE_DEPRECATED

Glib::PropertyProxy< Glib::RefPtr<Action> > Activatable::property_related_action() 
{
  return Glib::PropertyProxy< Glib::RefPtr<Action> >(this, "related-action");
}
#endif // GTKMM_DISABLE_DEPRECATED


#ifndef GTKMM_DISABLE_DEPRECATED

Glib::PropertyProxy_ReadOnly< Glib::RefPtr<Action> > Activatable::property_related_action() const
{
  return Glib::PropertyProxy_ReadOnly< Glib::RefPtr<Action> >(this, "related-action");
}
#endif // GTKMM_DISABLE_DEPRECATED


#ifndef GTKMM_DISABLE_DEPRECATED

Glib::PropertyProxy< bool > Activatable::property_use_action_appearance() 
{
  return Glib::PropertyProxy< bool >(this, "use-action-appearance");
}
#endif // GTKMM_DISABLE_DEPRECATED


#ifndef GTKMM_DISABLE_DEPRECATED

Glib::PropertyProxy_ReadOnly< bool > Activatable::property_use_action_appearance() const
{
  return Glib::PropertyProxy_ReadOnly< bool >(this, "use-action-appearance");
}
#endif // GTKMM_DISABLE_DEPRECATED


void Gtk::Activatable::update_vfunc(const Glib::RefPtr<Action>& action, const Glib::ustring& property_name) 
{
  const auto base = static_cast<BaseClassType*>(
      g_type_interface_peek_parent( // Get the parent interface of the interface (The original underlying C interface).
g_type_interface_peek(G_OBJECT_GET_CLASS(gobject_), CppObjectType::get_type()) // Get the interface.
)  );

  if(base && base->update)
  {
    (*base->update)(gobj(),Glib::unwrap(action),property_name.c_str());
  }
}
void Gtk::Activatable::sync_action_properties_vfunc(const Glib::RefPtr<Action>& action) 
{
  const auto base = static_cast<BaseClassType*>(
      g_type_interface_peek_parent( // Get the parent interface of the interface (The original underlying C interface).
g_type_interface_peek(G_OBJECT_GET_CLASS(gobject_), CppObjectType::get_type()) // Get the interface.
)  );

  if(base && base->sync_action_properties)
  {
    (*base->sync_action_properties)(gobj(),Glib::unwrap(action));
  }
}


} // namespace Gtk


