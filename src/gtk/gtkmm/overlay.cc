// Generated by gmmproc 2.54.0 -- DO NOT MODIFY!


#include <glibmm.h>

#include <gtkmm/overlay.h>
#include <gtkmm/private/overlay_p.h>


/*
 * Copyright 2014 The gtkmm Development Team
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
 */

#include <gtk/gtk.h>


namespace Gtk
{
} // namespace Gtk


namespace
{


static gboolean Overlay_signal_get_child_position_callback(GtkOverlay* self, GtkWidget* p0,GdkRectangle* p1,void* data)
{
  using namespace Gtk;
  using SlotType = sigc::slot< bool,Gtk::Widget*,Gdk::Rectangle& >;

  auto obj = dynamic_cast<Overlay*>(Glib::ObjectBase::_get_current_wrapper((GObject*) self));
  // Do not try to call a signal on a disassociated wrapper.
  if(obj)
  {
    try
    {
      if(const auto slot = Glib::SignalProxyNormal::data_to_slot(data))
        return static_cast<int>((*static_cast<SlotType*>(slot))(Glib::wrap(p0)
, Glib::wrap(p1)
));
    }
    catch(...)
    {
       Glib::exception_handlers_invoke();
    }
  }

  using RType = gboolean;
  return RType();
}

static gboolean Overlay_signal_get_child_position_notify_callback(GtkOverlay* self, GtkWidget* p0,GdkRectangle* p1, void* data)
{
  using namespace Gtk;
  using SlotType = sigc::slot< void,Gtk::Widget*,Gdk::Rectangle& >;

  auto obj = dynamic_cast<Overlay*>(Glib::ObjectBase::_get_current_wrapper((GObject*) self));
  // Do not try to call a signal on a disassociated wrapper.
  if(obj)
  {
    try
    {
      if(const auto slot = Glib::SignalProxyNormal::data_to_slot(data))
        (*static_cast<SlotType*>(slot))(Glib::wrap(p0)
, Glib::wrap(p1)
);
    }
    catch(...)
    {
      Glib::exception_handlers_invoke();
    }
  }

  using RType = gboolean;
  return RType();
}

static const Glib::SignalProxyInfo Overlay_signal_get_child_position_info =
{
  "get-child-position",
  (GCallback) &Overlay_signal_get_child_position_callback,
  (GCallback) &Overlay_signal_get_child_position_notify_callback
};


} // anonymous namespace


namespace Glib
{

Gtk::Overlay* wrap(GtkOverlay* object, bool take_copy)
{
  return dynamic_cast<Gtk::Overlay *> (Glib::wrap_auto ((GObject*)(object), take_copy));
}

} /* namespace Glib */

namespace Gtk
{


/* The *_Class implementation: */

const Glib::Class& Overlay_Class::init()
{
  if(!gtype_) // create the GType if necessary
  {
    // Glib::Class has to know the class init function to clone custom types.
    class_init_func_ = &Overlay_Class::class_init_function;

    // This is actually just optimized away, apparently with no harm.
    // Make sure that the parent type has been created.
    //CppClassParent::CppObjectType::get_type();

    // Create the wrapper type, with the same class/instance size as the base type.
    register_derived_type(gtk_overlay_get_type());

    // Add derived versions of interfaces, if the C type implements any interfaces:

  }

  return *this;
}


void Overlay_Class::class_init_function(void* g_class, void* class_data)
{
  const auto klass = static_cast<BaseClassType*>(g_class);
  CppClassParent::class_init_function(klass, class_data);


  klass->get_child_position = &get_child_position_callback;
}


gboolean Overlay_Class::get_child_position_callback(GtkOverlay* self, GtkWidget* p0, GdkRectangle* p1)
{
  const auto obj_base = static_cast<Glib::ObjectBase*>(
      Glib::ObjectBase::_get_current_wrapper((GObject*)self));

  // Non-gtkmmproc-generated custom classes implicitly call the default
  // Glib::ObjectBase constructor, which sets is_derived_. But gtkmmproc-
  // generated classes can use this optimisation, which avoids the unnecessary
  // parameter conversions if there is no possibility of the virtual function
  // being overridden:
  if(obj_base && obj_base->is_derived_())
  {
    const auto obj = dynamic_cast<CppObjectType* const>(obj_base);
    if(obj) // This can be NULL during destruction.
    {
      try // Trap C++ exceptions which would normally be lost because this is a C callback.
      {
        // Call the virtual member method, which derived classes might override.
        return static_cast<int>(obj->on_get_child_position(Glib::wrap(p0)
, Glib::wrap(p1)
));
      }
      catch(...)
      {
        Glib::exception_handlers_invoke();
      }
    }
  }

  const auto base = static_cast<BaseClassType*>(
        g_type_class_peek_parent(G_OBJECT_GET_CLASS(self)) // Get the parent class of the object class (The original underlying C class).
    );

  // Call the original underlying C function:
  if(base && base->get_child_position)
    return (*base->get_child_position)(self, p0, p1);

  using RType = gboolean;
  return RType();
}


Glib::ObjectBase* Overlay_Class::wrap_new(GObject* o)
{
  return manage(new Overlay((GtkOverlay*)(o)));

}


/* The implementation: */

Overlay::Overlay(const Glib::ConstructParams& construct_params)
:
  Gtk::Bin(construct_params)
{
  }

Overlay::Overlay(GtkOverlay* castitem)
:
  Gtk::Bin((GtkBin*)(castitem))
{
  }


Overlay::Overlay(Overlay&& src) noexcept
: Gtk::Bin(std::move(src))
{}

Overlay& Overlay::operator=(Overlay&& src) noexcept
{
  Gtk::Bin::operator=(std::move(src));
  return *this;
}

Overlay::~Overlay() noexcept
{
  destroy_();
}

Overlay::CppClassType Overlay::overlay_class_; // initialize static member

GType Overlay::get_type()
{
  return overlay_class_.init().get_type();
}


GType Overlay::get_base_type()
{
  return gtk_overlay_get_type();
}


Overlay::Overlay()
:
  // Mark this class as non-derived to allow C++ vfuncs to be skipped.
  Glib::ObjectBase(nullptr),
  Gtk::Bin(Glib::ConstructParams(overlay_class_.init()))
{
  

}

void Overlay::add_overlay(Gtk::Widget& widget)
{
  gtk_overlay_add_overlay(gobj(), (widget).gobj());
}

void Overlay::reorder_overlay(Widget& child, int position)
{
  gtk_overlay_reorder_overlay(gobj(), (child).gobj(), position);
}

bool Overlay::get_overlay_pass_through(Widget& widget) const
{
  return gtk_overlay_get_overlay_pass_through(const_cast<GtkOverlay*>(gobj()), (widget).gobj());
}

void Overlay::set_overlay_pass_through(Widget& widget, bool pass_through)
{
  gtk_overlay_set_overlay_pass_through(gobj(), (widget).gobj(), static_cast<int>(pass_through));
}


Glib::SignalProxy< bool,Gtk::Widget*,Gdk::Rectangle& > Overlay::signal_get_child_position()
{
  return Glib::SignalProxy< bool,Gtk::Widget*,Gdk::Rectangle& >(this, &Overlay_signal_get_child_position_info);
}


Gtk::ChildPropertyProxy< bool > Overlay::child_property_pass_through(Gtk::Widget& child) 
{
  return Gtk::ChildPropertyProxy< bool >(this, child, "pass-through");
}

Gtk::ChildPropertyProxy_ReadOnly< bool > Overlay::child_property_pass_through(const Gtk::Widget& child) const
{
  return Gtk::ChildPropertyProxy_ReadOnly< bool >(this, child, "pass-through");
}

Gtk::ChildPropertyProxy< int > Overlay::child_property_index(Gtk::Widget& child) 
{
  return Gtk::ChildPropertyProxy< int >(this, child, "index");
}

Gtk::ChildPropertyProxy_ReadOnly< int > Overlay::child_property_index(const Gtk::Widget& child) const
{
  return Gtk::ChildPropertyProxy_ReadOnly< int >(this, child, "index");
}


bool Gtk::Overlay::on_get_child_position(Gtk::Widget* widget, Gdk::Rectangle& allocation)
{
  const auto base = static_cast<BaseClassType*>(
      g_type_class_peek_parent(G_OBJECT_GET_CLASS(gobject_)) // Get the parent class of the object class (The original underlying C class).
  );

  if(base && base->get_child_position)
    return (*base->get_child_position)(gobj(),(GtkWidget*)Glib::unwrap(widget),(allocation).gobj());

  using RType = bool;
  return RType();
}


} // namespace Gtk


