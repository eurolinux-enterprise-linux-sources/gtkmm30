// Generated by gmmproc 2.50.0 -- DO NOT MODIFY!


#include <glibmm.h>

#include <gdkmm/drawingcontext.h>
#include <gdkmm/private/drawingcontext_p.h>


/* Copyright (C) 2016 The gtkmm Development Team
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library. If not, see <http://www.gnu.org/licenses/>.
 */

#include <gdkmm/window.h>

namespace
{
} // anonymous namespace


namespace Glib
{

Glib::RefPtr<Gdk::DrawingContext> wrap(GdkDrawingContext* object, bool take_copy)
{
  return Glib::RefPtr<Gdk::DrawingContext>( dynamic_cast<Gdk::DrawingContext*> (Glib::wrap_auto ((GObject*)(object), take_copy)) );
  //We use dynamic_cast<> in case of multiple inheritance.
}

} /* namespace Glib */


namespace Gdk
{


/* The *_Class implementation: */

const Glib::Class& DrawingContext_Class::init()
{
  if(!gtype_) // create the GType if necessary
  {
    // Glib::Class has to know the class init function to clone custom types.
    class_init_func_ = &DrawingContext_Class::class_init_function;

    // This is actually just optimized away, apparently with no harm.
    // Make sure that the parent type has been created.
    //CppClassParent::CppObjectType::get_type();

    // Create the wrapper type, with the same class/instance size as the base type.
    register_derived_type(gdk_drawing_context_get_type());

    // Add derived versions of interfaces, if the C type implements any interfaces:

  }

  return *this;
}


void DrawingContext_Class::class_init_function(void* g_class, void* class_data)
{
  const auto klass = static_cast<BaseClassType*>(g_class);
  CppClassParent::class_init_function(klass, class_data);


}


Glib::ObjectBase* DrawingContext_Class::wrap_new(GObject* object)
{
  return new DrawingContext((GdkDrawingContext*)object);
}


/* The implementation: */

GdkDrawingContext* DrawingContext::gobj_copy()
{
  reference();
  return gobj();
}

DrawingContext::DrawingContext(const Glib::ConstructParams& construct_params)
:
  Glib::Object(construct_params)
{

}

DrawingContext::DrawingContext(GdkDrawingContext* castitem)
:
  Glib::Object((GObject*)(castitem))
{}


DrawingContext::DrawingContext(DrawingContext&& src) noexcept
: Glib::Object(std::move(src))
{}

DrawingContext& DrawingContext::operator=(DrawingContext&& src) noexcept
{
  Glib::Object::operator=(std::move(src));
  return *this;
}


DrawingContext::~DrawingContext() noexcept
{}


DrawingContext::CppClassType DrawingContext::drawingcontext_class_; // initialize static member

GType DrawingContext::get_type()
{
  return drawingcontext_class_.init().get_type();
}


GType DrawingContext::get_base_type()
{
  return gdk_drawing_context_get_type();
}


DrawingContext::DrawingContext()
:
  // Mark this class as non-derived to allow C++ vfuncs to be skipped.
  Glib::ObjectBase(nullptr),
  Glib::Object(Glib::ConstructParams(drawingcontext_class_.init()))
{
  

}

Glib::RefPtr<Window> DrawingContext::get_window()
{
  Glib::RefPtr<Window> retvalue = Glib::wrap(gdk_drawing_context_get_window(gobj()));
  if(retvalue)
    retvalue->reference(); //The function does not do a ref for us.
  return retvalue;
}

Glib::RefPtr<const Window> DrawingContext::get_window() const
{
  return const_cast<DrawingContext*>(this)->get_window();
}

::Cairo::RefPtr< ::Cairo::Region> DrawingContext::get_clip() const
{
  return ::Cairo::RefPtr< ::Cairo::Region>(new ::Cairo::Region(gdk_drawing_context_get_clip(const_cast<GdkDrawingContext*>(gobj())), true /* do not take ref */));
}

bool DrawingContext::is_valid() const
{
  return gdk_drawing_context_is_valid(const_cast<GdkDrawingContext*>(gobj()));
}

::Cairo::RefPtr< ::Cairo::Context> DrawingContext::get_cairo_context()
{
  return ::Cairo::RefPtr< ::Cairo::Context>(new ::Cairo::Context(gdk_drawing_context_get_cairo_context(gobj()), false /* take reference */));
}

::Cairo::RefPtr<const ::Cairo::Context> DrawingContext::get_cairo_context() const
{
  return const_cast<DrawingContext*>(this)->get_cairo_context();
}

Glib::RefPtr<DrawingContext> DrawingContext::get_drawing_context_from_cairo_context(const ::Cairo::RefPtr< ::Cairo::Context>& cr)
{

  Glib::RefPtr<DrawingContext> retvalue = Glib::wrap(gdk_cairo_get_drawing_context((cr)->cobj()));
  if(retvalue)
    retvalue->reference(); //The function does not do a ref for us
  return retvalue;
}


Glib::PropertyProxy_ReadOnly< Glib::RefPtr<Window> > DrawingContext::property_window() const
{
  return Glib::PropertyProxy_ReadOnly< Glib::RefPtr<Window> >(this, "window");
}


} // namespace Gdk


